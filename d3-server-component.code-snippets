{
  "D3 Server Component": {
    "prefix": "d3sc",
    "body": [
      "import { JSDOM } from 'jsdom';",
      "import * as d3 from 'd3';",
      "",
      "type Props = {",
      "  width?: number;",
      "  height?: number;",
      "};",
      "",
      "export default async function ${TM_FILENAME_BASE}({ width = 1000, height = 500 }: Props) {",
      "  const dom = new JSDOM(`<!DOCTYPE html><body></body>`);",
      "  const document = dom.window.document;",
      "  (global as any).document = document;",
      "",
      "  const svg = d3",
      "    .select(document.body)",
      "    .append('svg')",
      "    .attr('width', width)",
      "    .attr('height', height)",
      "    .attr('style', 'border: 1px solid steelblue')",
      "    .attr('viewBox', `0 0 \\${width} \\${height}`);",
      "",
      "  const svgMarkup = d3.select(document.body).html();",
      "  delete (global as any).document;",
      "",
      "  return <div dangerouslySetInnerHTML={{ __html: svgMarkup }} />;",
      "}",
    ],
    "description": "D3.js 서버 컴포넌트 스니펫 (JSDOM 활용)",
  },
  "D3 Candle Chart Server Component": {
    "prefix": "d3candle",
    "body": [
      "import { JSDOM } from 'jsdom';",
      "import * as d3 from 'd3';",
      "import { BybitKline } from '@/types/type';",
      "",
      "type Props = {",
      "  data: BybitKline[];",
      "  width?: number;",
      "  height?: number;",
      "};",
      "",
      "export default async function ${TM_FILENAME_BASE}({ data, width = 1000, height = 500 }: Props) {",
      "  // JSDOM을 사용하여 서버 환경에 가상 DOM 생성",
      "  const dom = new JSDOM(`<!DOCTYPE html><body></body>`);",
      "  const document = dom.window.document;",
      "  (global as any).document = document;",
      "",
      "  // 차트 영역 SVG 생성",
      "  const svg = d3",
      "    .select(document.body)",
      "    .append('svg')",
      "    .attr('width', width)",
      "    .attr('height', height)",
      "    .attr('viewBox', `0 0 \\${width} \\${height}`)",
      "    .style('background-color', '#161B21')",
      "    .style('border', '1px solid #2A3036');",
      "",
      "  // 차트의 파라미터 및 여백 설정",
      "  const margin = { top: 20, right: 60, bottom: 30, left: 10 };",
      "  const chartWidth = width - margin.left - margin.right;",
      "  const chartHeight = height - margin.top - margin.bottom;",
      "  const candleChartHeightRatio = 0.8; // 캔들차트와 거래량 차트 비율",
      "",
      "  // 메인 그래프 그룹 생성",
      "  const g = svg",
      "    .append('g')",
      "    .attr('transform', `translate(\\${margin.left},\\${margin.top})`);",
      "",
      "  // 스케일 설정",
      "  // X축 (시간)",
      "  const x = d3",
      "    .scaleTime()",
      "    .domain([new Date(Number(data[0][0])), new Date(Number(data[data.length - 1][0]))])",
      "    .range([0, chartWidth]);",
      "",
      "  // Y축 (가격)",
      "  const yDomain = [",
      "    Number(d3.min(data, d => d[3])) * 0.999, // 최저가의 99.9%",
      "    Number(d3.max(data, d => d[2])) * 1.001  // 최고가의 100.1%",
      "  ];",
      "  const y = d3",
      "    .scaleLinear()",
      "    .domain(yDomain)",
      "    .range([chartHeight * candleChartHeightRatio, 0]);",
      "",
      "  // Y축 (거래량)",
      "  const volumeMax = Number(d3.max(data, d => d[5])) * 1.1; // 최대 거래량의 110%",
      "  const yVolume = d3",
      "    .scaleLinear()",
      "    .domain([0, volumeMax])",
      "    .range([chartHeight, chartHeight * candleChartHeightRatio]);",
      "",
      "  // X축 생성",
      "  const xAxis = g",
      "    .append('g')",
      "    .attr('class', 'x-axis')",
      "    .attr('transform', `translate(0,\\${chartHeight})`)",
      "    .call(",
      "      d3.axisBottom(x)",
      "        .ticks(6)",
      "        .tickFormat((d) => {",
      "          const date = new Date(d as Date);",
      "          return date.toLocaleDateString('en-US', {",
      "            month: 'short',",
      "            day: 'numeric',",
      "            hour: '2-digit',",
      "            minute: '2-digit',",
      "          });",
      "        })",
      "    );",
      "",
      "  // Y축 생성 (가격)",
      "  const yAxis = g",
      "    .append('g')",
      "    .attr('class', 'y-axis')",
      "    .attr('transform', `translate(\\${chartWidth}, 0)`)",
      "    .call(d3.axisRight(y).ticks(8));",
      "",
      "  // Y축 생성 (거래량)",
      "  const yVolumeAxis = g",
      "    .append('g')",
      "    .attr('class', 'y-volume-axis')",
      "    .attr('transform', `translate(\\${chartWidth}, 0)`)",
      "    .call(",
      "      d3.axisRight(yVolume)",
      "        .ticks(3)",
      "        .tickFormat(d => `\\${Number(d).toLocaleString()}`)",
      "    );",
      "",
      "  // 축 스타일링",
      "  svg.selectAll('.domain').style('stroke', '#2A3036');",
      "  svg.selectAll('.tick line').style('stroke', '#2A3036');",
      "  svg.selectAll('.tick text').style('fill', '#71757A').style('font-size', '11px');",
      "",
      "  // 구분선 추가",
      "  g.append('line')",
      "    .attr('x1', 0)",
      "    .attr('y1', chartHeight * candleChartHeightRatio)",
      "    .attr('x2', chartWidth)",
      "    .attr('y2', chartHeight * candleChartHeightRatio)",
      "    .style('stroke', '#2A3036')",
      "    .style('stroke-width', 1);",
      "",
      "  // 캔들 너비 계산",
      "  const candleWidth = Math.max(3, (chartWidth / data.length) * 0.8);",
      "",
      "  // 캔들스틱 그리기",
      "  const candles = g.append('g').attr('class', 'candles');",
      "",
      "  // 캔들 몸통 (직사각형) 그리기",
      "  candles",
      "    .selectAll('.candle-body')",
      "    .data(data)",
      "    .enter()",
      "    .append('rect')",
      "    .attr('class', 'candle-body')",
      "    .attr('x', d => x(new Date(d[0])) - candleWidth / 2)",
      "    .attr('y', d => y(Math.max(d[1], d[4])))",
      "    .attr('width', candleWidth)",
      "    .attr('height', d => Math.max(Math.abs(y(d[1]) - y(d[4])), 1))",
      "    .attr('fill', d => d[1] > d[4] ? '#EF454A' : '#1EB26B');",
      "",
      "  // 캔들 심지 (선) 그리기",
      "  candles",
      "    .selectAll('.candle-wick')",
      "    .data(data)",
      "    .enter()",
      "    .append('line')",
      "    .attr('class', 'candle-wick')",
      "    .attr('x1', d => x(new Date(d[0])))",
      "    .attr('x2', d => x(new Date(d[0])))",
      "    .attr('y1', d => y(d[2]))",
      "    .attr('y2', d => y(d[3]))",
      "    .attr('stroke', d => d[1] > d[4] ? '#EF454A' : '#1EB26B')",
      "    .attr('stroke-width', 1);",
      "",
      "  // 거래량 막대 그리기",
      "  const volumes = g.append('g').attr('class', 'volumes');",
      "",
      "  volumes",
      "    .selectAll('.volume-bar')",
      "    .data(data)",
      "    .enter()",
      "    .append('rect')",
      "    .attr('class', 'volume-bar')",
      "    .attr('x', d => x(new Date(d[0])) - candleWidth / 2)",
      "    .attr('y', d => yVolume(d[5]))",
      "    .attr('width', candleWidth)",
      "    .attr('height', d => chartHeight - yVolume(d[5]))",
      "    .attr('fill', d => d[1] > d[4] ? '#EF454A' : '#1EB26B')",
      "    .attr('opacity', 0.6);",
      "",
      "  // SVG 마크업 추출 및 글로벌 환경 정리",
      "  const svgMarkup = d3.select(document.body).html();",
      "  delete (global as any).document;",
      "",
      "  return (",
      "    <div className=\"chart-container\">",
      "      <div dangerouslySetInnerHTML={{ __html: svgMarkup }} />",
      "    </div>",
      "  );",
      "}",
    ],
    "description": "D3.js 캔들차트 서버 컴포넌트 스니펫 (JSDOM 활용)",
  },
}
